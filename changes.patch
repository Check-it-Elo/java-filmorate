diff --git a/src/main/java/ru/yandex/practicum/filmorate/controller/FilmController.java b/src/main/java/ru/yandex/practicum/filmorate/controller/FilmController.java
index 2bfc6d5..d64f662 100644
--- a/src/main/java/ru/yandex/practicum/filmorate/controller/FilmController.java
+++ b/src/main/java/ru/yandex/practicum/filmorate/controller/FilmController.java
@@ -57,10 +57,9 @@ public class FilmController {
     }
 
     @GetMapping("/popular")
-    public List<Film> getPopularFilms(
-            @RequestParam(defaultValue = "10") int count,
-            @RequestParam(required = false) Integer genreId,
-            @RequestParam(required = false) Integer year) {
+    public List<Film> getPopularFilms(@RequestParam(defaultValue = "10") int count,
+                                      @RequestParam(required = false) Integer genreId,
+                                      @RequestParam(required = false) Integer year) {
         return filmService.getMostPopularFilms(count, genreId, year);
     }
 
@@ -88,11 +87,14 @@ public class FilmController {
     }
 
     @GetMapping("/director/{directorId}")
-    public List<Film> getFilmsByDirectorSorted(
-            @PathVariable int directorId,
-            @RequestParam String sortBy) {
+    public List<Film> getFilmsByDirectorSorted(@PathVariable int directorId, @RequestParam String sortBy) {
         return filmService.getFilmsByDirectorSorted(directorId, sortBy);
     }
 
+    @GetMapping("/common")
+    public List<Film> getCommonFilms(@RequestParam Long userId, @RequestParam Long friendId) {
+        return filmService.getCommonFilms(userId, friendId);
+    }
+
 
 }
\ No newline at end of file
diff --git a/src/main/java/ru/yandex/practicum/filmorate/service/FilmService.java b/src/main/java/ru/yandex/practicum/filmorate/service/FilmService.java
index 2fdaa5d..c78ada0 100644
--- a/src/main/java/ru/yandex/practicum/filmorate/service/FilmService.java
+++ b/src/main/java/ru/yandex/practicum/filmorate/service/FilmService.java
@@ -33,11 +33,10 @@ public class FilmService {
     private final DirectorService directorService;
 
     @Autowired
-    public FilmService(
-            @Qualifier("filmDbStorage") FilmStorage filmStorage,
-            @Qualifier("userDbStorage") UserStorage userStorage,
-            GenreService genreService,
-            DirectorService directorService) {
+    public FilmService(@Qualifier("filmDbStorage") FilmStorage filmStorage,
+                       @Qualifier("userDbStorage") UserStorage userStorage,
+                       GenreService genreService,
+                       DirectorService directorService) {
         this.filmStorage = filmStorage;
         this.userStorage = userStorage;
         this.genreService = genreService;
@@ -147,6 +146,14 @@ public class FilmService {
         return popularFilms;
     }
 
+    public List<Film> getCommonFilms(Long userId, Long friendId) {
+        getUserById(userId);
+        getUserById(friendId);
+        List<Film> commonFilms = filmStorage.getCommonFilms(userId, friendId);
+        log.info("Возвращено {} общих фильмов фильмов", commonFilms.size());
+        return commonFilms;
+    }
+
     private User getUserById(Long userId) {
         User user = userStorage.getUserById(userId);
         if (user == null) {
@@ -213,4 +220,5 @@ public class FilmService {
         }
     }
 
+
 }
\ No newline at end of file
diff --git a/src/main/java/ru/yandex/practicum/filmorate/storage/FilmDbStorage.java b/src/main/java/ru/yandex/practicum/filmorate/storage/FilmDbStorage.java
index 1b6fc66..51fbe79 100644
--- a/src/main/java/ru/yandex/practicum/filmorate/storage/FilmDbStorage.java
+++ b/src/main/java/ru/yandex/practicum/filmorate/storage/FilmDbStorage.java
@@ -42,10 +42,11 @@ public class FilmDbStorage implements FilmStorage {
         return films;
     }
 
+
     @Override
     public Film addFilm(Film film) {
         String sql = "INSERT INTO films (name, description, release_date, duration, mpa_id) " +
-                "VALUES (?, ?, ?, ?, ?)";
+                     "VALUES (?, ?, ?, ?, ?)";
         KeyHolder keyHolder = new GeneratedKeyHolder();
 
         jdbcTemplate.update(connection -> {
@@ -64,20 +65,16 @@ public class FilmDbStorage implements FilmStorage {
         // Сохраняем жанры
         if (film.getGenres() != null) {
             for (Genre genre : film.getGenres()) {
-                jdbcTemplate.update(
-                        "INSERT INTO film_genres (film_id, genre_id) VALUES (?, ?)",
-                        filmId, genre.getId()
-                );
+                jdbcTemplate.update("INSERT INTO film_genres (film_id, genre_id) VALUES (?, ?)", filmId, genre.getId());
             }
         }
 
         // Сохраняем режиссёров
         if (film.getDirectors() != null) {
             for (Director director : film.getDirectors()) {
-                jdbcTemplate.update(
-                        "INSERT INTO film_directors (film_id, director_id) VALUES (?, ?)",
-                        filmId, director.getId()
-                );
+                jdbcTemplate.update("INSERT INTO film_directors (film_id, director_id) VALUES (?, ?)",
+                                    filmId,
+                                    director.getId());
             }
         }
 
@@ -87,14 +84,14 @@ public class FilmDbStorage implements FilmStorage {
     @Override
     public Film updateFilm(Film film) {
         String sql = "UPDATE films SET name = ?, description = ?, release_date = ?, duration = ?, mpa_id = ? " +
-                "WHERE id = ?";
+                     "WHERE id = ?";
         jdbcTemplate.update(sql,
-                film.getName(),
-                film.getDescription(),
-                Date.valueOf(film.getReleaseDate()),
-                film.getDuration(),
-                film.getMpa().getId(),
-                film.getId());
+                            film.getName(),
+                            film.getDescription(),
+                            Date.valueOf(film.getReleaseDate()),
+                            film.getDuration(),
+                            film.getMpa().getId(),
+                            film.getId());
 
         // Сначала удаляем старые жанры
         jdbcTemplate.update("DELETE FROM film_genres WHERE film_id = ?", film.getId());
@@ -102,10 +99,9 @@ public class FilmDbStorage implements FilmStorage {
         // Затем вставляем актуальные жанры
         if (film.getGenres() != null) {
             for (Genre genre : film.getGenres()) {
-                jdbcTemplate.update(
-                        "INSERT INTO film_genres (film_id, genre_id) VALUES (?, ?)",
-                        film.getId(), genre.getId()
-                );
+                jdbcTemplate.update("INSERT INTO film_genres (film_id, genre_id) VALUES (?, ?)",
+                                    film.getId(),
+                                    genre.getId());
             }
         }
 
@@ -115,10 +111,9 @@ public class FilmDbStorage implements FilmStorage {
         // Добавляем актуальных режиссёров
         if (film.getDirectors() != null) {
             for (Director director : film.getDirectors()) {
-                jdbcTemplate.update(
-                        "INSERT INTO film_directors (film_id, director_id) VALUES (?, ?)",
-                        film.getId(), director.getId()
-                );
+                jdbcTemplate.update("INSERT INTO film_directors (film_id, director_id) VALUES (?, ?)",
+                                    film.getId(),
+                                    director.getId());
             }
         }
 
@@ -140,44 +135,42 @@ public class FilmDbStorage implements FilmStorage {
 
         // Получение MPA
         int mpaId = rs.getInt("mpa_id");
-        String mpaName = jdbcTemplate.queryForObject(
-                "SELECT name FROM mpa WHERE id = ?",
-                String.class,
-                mpaId
-        );
+        String mpaName = jdbcTemplate.queryForObject("SELECT name FROM mpa WHERE id = ?", String.class, mpaId);
         MPA mpa = new MPA(mpaId, mpaName);
 
         // Получение жанров
         String sqlGenres = "SELECT g.id, g.name FROM film_genres fg " +
-                "JOIN genres g ON fg.genre_id = g.id " +
-                "WHERE fg.film_id = ?";
-        List<Genre> genreList = jdbcTemplate.query(sqlGenres, (genreRs, genreRow) ->
-                new Genre(genreRs.getInt("id"), genreRs.getString("name")), filmId);
+                           "JOIN genres g ON fg.genre_id = g.id " +
+                           "WHERE fg.film_id = ?";
+        List<Genre> genreList = jdbcTemplate.query(sqlGenres,
+                                                   (genreRs, genreRow) -> new Genre(genreRs.getInt("id"),
+                                                                                    genreRs.getString("name")),
+                                                   filmId);
 
         // Получение режиссёров
         String sqlDirectors = "SELECT d.id, d.name FROM film_directors fd " +
-                "JOIN directors d ON fd.director_id = d.id " +
-                "WHERE fd.film_id = ?";
-        List<Director> directorList = jdbcTemplate.query(sqlDirectors, (directorRs, directorRow) ->
-                new Director(directorRs.getInt("id"), directorRs.getString("name")), filmId);
+                              "JOIN directors d ON fd.director_id = d.id " +
+                              "WHERE fd.film_id = ?";
+        List<Director> directorList = jdbcTemplate.query(sqlDirectors,
+                                                         (directorRs, directorRow) -> new Director(directorRs.getInt(
+                                                                 "id"), directorRs.getString("name")),
+                                                         filmId);
 
         // Получение лайков
         String sqlLikes = "SELECT user_id FROM film_likes WHERE film_id = ?";
-        List<Long> likes = jdbcTemplate.query(sqlLikes,
-                (likeRs, likeRow) -> likeRs.getLong("user_id"),
-                filmId);
+        List<Long> likes = jdbcTemplate.query(sqlLikes, (likeRs, likeRow) -> likeRs.getLong("user_id"), filmId);
 
         return Film.builder()
-                .id(filmId)
-                .name(rs.getString("name"))
-                .description(rs.getString("description"))
-                .releaseDate(rs.getDate("release_date").toLocalDate())
-                .duration(rs.getLong("duration"))
-                .mpa(mpa)
-                .genres(new HashSet<>(genreList))
-                .directors(new HashSet<>(directorList))
-                .likes(new HashSet<>(likes))
-                .build();
+                   .id(filmId)
+                   .name(rs.getString("name"))
+                   .description(rs.getString("description"))
+                   .releaseDate(rs.getDate("release_date").toLocalDate())
+                   .duration(rs.getLong("duration"))
+                   .mpa(mpa)
+                   .genres(new HashSet<>(genreList))
+                   .directors(new HashSet<>(directorList))
+                   .likes(new HashSet<>(likes))
+                   .build();
     }
 
     @Override
@@ -195,22 +188,35 @@ public class FilmDbStorage implements FilmStorage {
     @Override
     public List<Film> getMostPopularFilms(int count) {
         String sql = "SELECT f.* FROM films f " +
-                "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
-                "GROUP BY f.id " +
-                "ORDER BY COUNT(fl.user_id) DESC " +
-                "LIMIT ?";
+                     "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
+                     "GROUP BY f.id " +
+                     "ORDER BY COUNT(fl.user_id) DESC " +
+                     "LIMIT ?";
         return jdbcTemplate.query(sql, this::mapRowToFilm, count);
     }
 
+    @Override
+    public List<Film> getCommonFilms(Long userId, Long friendId) {
+        String sql = """
+                SELECT f.*
+                FROM films AS f
+                JOIN film_likes AS fl   ON fl.film_id = f.id
+                JOIN film_likes AS fll  ON fll.film_id = f.id
+                WHERE fl.user_id = ? AND fll.user_id = ?
+                GROUP BY f.id
+                ORDER BY COUNT(fl.user_id) DESC
+                """;
+
+        return jdbcTemplate.query(sql, this::mapRowToFilm, userId, friendId);
+    }
+
     @Override
     public List<Film> getMostPopularFilms(int count, Integer genreId, Integer year) {
-        StringBuilder sql = new StringBuilder(
-                "SELECT f.* " +
-                        "FROM films f " +
-                        "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
-                        "LEFT JOIN film_genres fg ON f.id = fg.film_id " +
-                        "WHERE 1=1 "
-        );
+        StringBuilder sql = new StringBuilder("SELECT f.* " +
+                                              "FROM films f " +
+                                              "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
+                                              "LEFT JOIN film_genres fg ON f.id = fg.film_id " +
+                                              "WHERE 1=1 ");
 
         List<Object> params = new ArrayList<>();
 
@@ -224,10 +230,10 @@ public class FilmDbStorage implements FilmStorage {
         }
 
         sql.append("""
-            GROUP BY f.id
-            ORDER BY COUNT(fl.user_id) DESC
-            LIMIT ?
-        """);
+                               GROUP BY f.id
+                               ORDER BY COUNT(fl.user_id) DESC
+                               LIMIT ?
+                           """);
 
         params.add(count);
 
@@ -239,20 +245,18 @@ public class FilmDbStorage implements FilmStorage {
     public Collection<Film> getFilmsByGenre(int genreId) {
         // Проверка существования жанра
         try {
-            Integer count = jdbcTemplate.queryForObject(
-                    "SELECT COUNT(*) FROM genres WHERE id = ?",
-                    Integer.class,
-                    genreId
-            );
+            Integer count = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM genres WHERE id = ?",
+                                                        Integer.class,
+                                                        genreId);
 
             if (count == null || count == 0) {
                 throw new NotFoundException("Жанр с ID " + genreId + " не найден");
             }
 
             String sql = "SELECT f.* FROM films f " +
-                    "JOIN film_genres fg ON f.id = fg.film_id " +
-                    "WHERE fg.genre_id = ? " +
-                    "ORDER BY f.id";
+                         "JOIN film_genres fg ON f.id = fg.film_id " +
+                         "WHERE fg.genre_id = ? " +
+                         "ORDER BY f.id";
 
             return jdbcTemplate.query(sql, this::mapRowToFilm, genreId);
         } catch (DataAccessException e) {
@@ -275,11 +279,7 @@ public class FilmDbStorage implements FilmStorage {
 
     @Override
     public void validateMpaExists(int mpaId) {
-        Integer mpaCount = jdbcTemplate.queryForObject(
-                "SELECT COUNT(*) FROM mpa WHERE id = ?",
-                Integer.class,
-                mpaId
-        );
+        Integer mpaCount = jdbcTemplate.queryForObject("SELECT COUNT(*) FROM mpa WHERE id = ?", Integer.class, mpaId);
         if (mpaCount == null || mpaCount == 0) {
             throw new NotFoundException("MPA с ID " + mpaId + " не найден");
         }
@@ -297,13 +297,15 @@ public class FilmDbStorage implements FilmStorage {
         }
 
         String sql = "SELECT f.* FROM films f " +
-                "JOIN film_directors fd ON f.id = fd.film_id " +
-                "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
-                "WHERE fd.director_id = ? " +
-                "GROUP BY f.id " +
-                "ORDER BY " + orderByClause;
+                     "JOIN film_directors fd ON f.id = fd.film_id " +
+                     "LEFT JOIN film_likes fl ON f.id = fl.film_id " +
+                     "WHERE fd.director_id = ? " +
+                     "GROUP BY f.id " +
+                     "ORDER BY " +
+                     orderByClause;
 
         return jdbcTemplate.query(sql, this::mapRowToFilm, directorId);
     }
 
+
 }
\ No newline at end of file
diff --git a/src/main/java/ru/yandex/practicum/filmorate/storage/FilmStorage.java b/src/main/java/ru/yandex/practicum/filmorate/storage/FilmStorage.java
index 5b395d2..c66a2f8 100644
--- a/src/main/java/ru/yandex/practicum/filmorate/storage/FilmStorage.java
+++ b/src/main/java/ru/yandex/practicum/filmorate/storage/FilmStorage.java
@@ -29,4 +29,5 @@ public interface FilmStorage {
 
     List<Film> getFilmsByDirectorSorted(int directorId, String sortBy);
 
+    List<Film> getCommonFilms(Long userId, Long friendId);
 }
\ No newline at end of file
diff --git a/src/main/java/ru/yandex/practicum/filmorate/storage/InMemoryFilmStorage.java b/src/main/java/ru/yandex/practicum/filmorate/storage/InMemoryFilmStorage.java
index 6a5205f..7e5e545 100644
--- a/src/main/java/ru/yandex/practicum/filmorate/storage/InMemoryFilmStorage.java
+++ b/src/main/java/ru/yandex/practicum/filmorate/storage/InMemoryFilmStorage.java
@@ -93,4 +93,12 @@ public class InMemoryFilmStorage implements FilmStorage {
         return new ArrayList<>();
     }
 
+    @Override
+    public List<Film> getCommonFilms(Long userId, Long friendId) {
+        // Заглушка для in-memory реализации
+        log.info("Заглушка: Получение общих фильмов для пользователей с id {} и id {}", userId, friendId);
+        return new ArrayList<>();
+    }
+
+
 }
\ No newline at end of file
